package br.com.dnl.AppContatos.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.com.dnl.AppContatos.Dto.MalaDiretaDto;
import br.com.dnl.AppContatos.Enum.OrderUf;
import br.com.dnl.AppContatos.model.Pessoas;
import br.com.dnl.AppContatos.repository.PessoasRepository;

@Service
public class PessoasService {
	
	@Autowired
	private PessoasRepository pessoaRepository;

	// ----- SALVAR -----
	
	public Pessoas save(Pessoas pessoa) {
		if (pessoa.getNome() == null 			|| pessoa.getNome().length() >= 150 	|| pessoa.getNome().matches(".*\\d.*") 		|| pessoa.getNome().split("\\s+").length < 2
				
			    || pessoa.getEndereco() == null || pessoa.getEndereco().length() >= 100 || pessoa.getEndereco().matches(".*\\d.*")
			    
			    || pessoa.getNumero() == null 	|| pessoa.getNumero() < 0 
			    
			    || pessoa.getCep() == null 		|| !pessoa.getCep().matches("\\d{5}-\\d{3}")
			    
			    || pessoa.getCidade() == null 	|| pessoa.getCidade().length() >= 35	 || pessoa.getCidade().matches(".*\\d.*")) {
			    
			    System.out.println("Dados inseridos de forma incorreta.");
			    return null;
			}
		


		System.out.println("[" +
				"Nome:" + 		pessoa.getNome() + 		"," +
				" Endereço:" + 	pessoa.getEndereco() + 	"," +
				" Número:" + 	pessoa.getNumero() + 	"," +
				" CEP:" + 		pessoa.getCep() + 		"," +
				" Cidade:" + 	pessoa.getCidade() + 	"," +
				" UF:" + 		pessoa.getOrderUf() + 	"]");
		return pessoaRepository.save(pessoa);

	}
	
	// ----- ENCONTRAR POR ID -----
	public Optional<Pessoas> findById(Long id){
		System.out.println("Id " + "[" + id +"]"+ " Encontrado com sucesso");
		return pessoaRepository.findById(id); 
	}
	
	// ----- LISTAGEM -----
	public List<Pessoas> findAll() {
		return pessoaRepository.findAll();
	}
	    
	// ----- ATUALIZAR -----
	public Pessoas update(Long id, Pessoas pessoa) {
	    Optional<Pessoas> findPessoa = pessoaRepository.findById(id);

	    if (findPessoa.isPresent()) {
	        Pessoas updPessoa = findPessoa.get();

	        if (pessoa.getNome() == null 
	                || pessoa.getNome().length() >= 150 
	                || pessoa.getNome().matches(".*\\d.*") 
	                || pessoa.getNome().split("\\s+").length < 2) {
	            return null;
	        }
	        updPessoa.setNome(pessoa.getNome());

	        if (pessoa.getEndereco() == null 
	                || pessoa.getEndereco().length() >= 100 
	                || pessoa.getEndereco().matches(".*\\d.*")) {
	            return null;
	        }
	        updPessoa.setEndereco(pessoa.getEndereco());

	        if (pessoa.getCep() == null 
	                || !pessoa.getCep().matches("\\d{5}-\\d{3}")) {
	            return null;
	        }
	        updPessoa.setCep(pessoa.getCep());

	        if (pessoa.getCidade() == null 
	                || pessoa.getCidade().length() >= 35 
	                || pessoa.getCidade().matches(".*\\d.*")) {
	            return null;
	        }
	        updPessoa.setCidade(pessoa.getCidade());
	        
	        
	        if (pessoa.getOrderUf() == null) {
	        	return null;
	        }
	        updPessoa.setOrderUf(pessoa.getOrderUf());

	        System.out.println("Id " + "[" + id + "]" + " Atualizado com sucesso");
	        return pessoaRepository.save(updPessoa); 
	    }

	    System.out.println("Pessoa com ID " + "[" + id + "]" + " não encontrada. Criando uma nova pessoa.");
	    return pessoaRepository.save(pessoa);         
	}
	
	// ----- DELETAR -----	
	public void delete(Long id) {
		System.out.println("Id " + "[" + id +"]"+ " Deletado com sucesso");
		pessoaRepository.deleteById(id);
	}
	
	// ----- MALA DIRETA -----
	
	public MalaDiretaDto buscarPorId(Long id) {
		Optional<Pessoas> pessoa = pessoaRepository.findById(id);
		if (pessoa.isEmpty()) {
			return null; 
		}
		return new MalaDiretaDto(pessoa.get());
	}
    
    // ----- LISTAGEM MALA DIRETA -----
	public List<MalaDiretaDto> listarTodos() {
		return pessoaRepository.findAll().stream().map(MalaDiretaDto::new).toList();
	}
		
}

