package br.com.dnl.AppContatos.resouce;

import java.util.List;
import java.util.Optional;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.dnl.AppContatos.Dto.MalaDiretaDto;
import br.com.dnl.AppContatos.model.Pessoas;
import br.com.dnl.AppContatos.service.PessoasService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;


@RestController
@RequestMapping("/api/pessoas") //http://localhost:8080/api/pessoas
public class PessoasResource {

	@Autowired
	PessoasService pessoaService;
	
	// ----- SALVAR -----
	
	@PostMapping //POST http://localhost:8080/api/pessoas
	@Operation(summary = "Gravar uma nova pessoa")
	@ApiResponses({
	@ApiResponse(responseCode = "400", description = "Erro ao cadastrar a pessoa"),
    @ApiResponse(responseCode = "201", description = "Pessoa cadastrada com sucesso")})
	public ResponseEntity<Pessoas> save(@RequestBody Pessoas pessoa) {
		Pessoas newPessoa = pessoaService.save(pessoa);
		
		if(newPessoa == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}
		else {
			return ResponseEntity.status(HttpStatus.CREATED).body(newPessoa);
		}
	}
	
	// ----- ENCONTRAR POR ID -----
	
	@GetMapping("/{id}") // GET http://localhost:8080/api/pessoas/{id}
	@Operation(summary = "Encontrar uma pessoa por ID")
    @ApiResponses({
    @ApiResponse(responseCode = "404", description = "Pessoa não encontrada"),
    @ApiResponse(responseCode = "200", description = "Pessoa encontrada")
    })
		public ResponseEntity<Optional<Pessoas>> findById(@PathVariable Long id){
			Optional<Pessoas> pessoa = pessoaService.findById(id);
			if(pessoa.isEmpty()) { 
				return ResponseEntity.status(HttpStatus.NOT_FOUND).build(); 
			}else {
				return ResponseEntity.status(HttpStatus.OK).body(pessoa);
			}
	}
	
	// ----- LISTAGEM -----
	
	@GetMapping //GET http://localhost:8080/api/pessoas
	@Operation(summary = "Listar pessoas cadastradas")
    @ApiResponses({
    @ApiResponse(responseCode = "200", description = "Lista de pessoas retornada com sucesso"),
    @ApiResponse(responseCode = "404", description = "Nenhuma pessoa encontrada")
    })
		public ResponseEntity<List<Pessoas>> findAll(){
			List<Pessoas> pessoa = pessoaService.findAll();
			if(pessoa == null)
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
			if(pessoa.size() == 0)
				return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
			return ResponseEntity.ok(pessoa);
	}
	
	// ----- ATUALIZAR -----
	
	@PutMapping("/{id}") //PUT http://localhost:8080/api/pessoas/{id}
	@Operation(summary = "Atualizar atributo de uma pessoa")
    @ApiResponses({
    @ApiResponse(responseCode = "200", description = "Pessoa atualizada com sucesso"),
    @ApiResponse(responseCode = "404", description = "Pessoa não encontrada")
    })
		public ResponseEntity<Pessoas> update(@PathVariable Long id, @RequestBody Pessoas pessoa){
			Pessoas updPessoa = pessoaService.update(id, pessoa);
			if(updPessoa == null) {
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
			}else {
				return ResponseEntity.status(HttpStatus.OK).body(updPessoa);
			}
	}
	
	// ----- DELETAR -----
	
	@DeleteMapping("/{id}") //DELETE http://localhost:8080/api/pessoas/{id}
	@Operation(summary = "Deletar uma pessoa por ID")
	@ApiResponses({
    @ApiResponse(responseCode = "404", description = "Pessoa não encontrada"),
    @ApiResponse(responseCode = "204", description = "Pessoa deletada com sucesso")
	})
	public ResponseEntity<?> delete(@PathVariable Long id) {
	    Optional<Pessoas> pessoa = pessoaService.findById(id);
	    
	    if (pessoa == null) {
	        return new ResponseEntity<>(HttpStatus.NOT_FOUND); 
	    }
	    
	    pessoaService.delete(id);
	    return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	}
	
	// ----- MALA DIRETA ----- 
	
	@GetMapping("/maladireta/{id}")
    @ApiResponses({
    @ApiResponse(responseCode = "404", description = "Pessoa não encontrada"),
    @ApiResponse(responseCode = "200", description = "Pessoa encontrada")
    })	
	public ResponseEntity<MalaDiretaDto> MalaDiretaId(@PathVariable Long id) {
	    MalaDiretaDto malaDireta = pessoaService.buscarPorId(id);

	    if (malaDireta == null) {
	        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
	    } else {
	        return ResponseEntity.ok(malaDireta);
	    }
	}
	
	//@GetMapping("/maladireta/{id}")
    //public ResponseEntity<MalaDiretaDto> buscarMalaDireta(@PathVariable Long id) {
    //    return ResponseEntity.ok(pessoaService.buscarPorId(id));
    //} 
	
	   
    // ----- LISTAGEM MALA DIRETA -----
    @GetMapping("/maladireta")
    @ApiResponses({
    @ApiResponse(responseCode = "204", description = "Sem conteúdo"),
    @ApiResponse(responseCode = "200", description = "Mala Direta encontrada")
    })	
    public ResponseEntity<List<MalaDiretaDto>> listarMalaDireta() {
        List<MalaDiretaDto> malaDiretaList = pessoaService.listarTodos();

        if (malaDiretaList == null || malaDiretaList.isEmpty()) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT); 
        } else {
            return new ResponseEntity<>(malaDiretaList, HttpStatus.OK); 
        }
    }
    
}
