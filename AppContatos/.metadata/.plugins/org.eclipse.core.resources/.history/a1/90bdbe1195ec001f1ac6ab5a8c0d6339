package br.com.dnl.AppContatos.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.com.dnl.AppContatos.model.Contatos;
import br.com.dnl.AppContatos.model.Pessoas;
import br.com.dnl.AppContatos.repository.ContatosRepository;
import br.com.dnl.AppContatos.repository.PessoasRepository;

@Service
public class ContatosService {
	
	@Autowired
	private ContatosRepository contatoRepository;	

	@Autowired
	private PessoasRepository pessoaRepository;
	
	// ----- SALVAR CONTATO -----
	public Contatos save(Contatos contato) {		
	    
	    if (contato.getPessoa().getId() != null) {
	        
	        Optional<Pessoas> findPessoa = pessoaRepository.findById(contato.getPessoa().getId());
	        if (findPessoa.isEmpty()) {
	            System.out.println("Pessoa não encontrada");
	            return null;
	        }

	        // Validação baseada no tipo de contato (OrderTipo)
	        if (contato.getOrderTipo() == null || contato.getContato() == null || contato.getContato().isBlank()) {
	            System.out.println("Contato inválido.");
	            return null;
	        }

	        switch (contato.getOrderTipo()) {
	            case Residencial:
	                if (!contato.getContato().matches("\\(\\d{2}\\) \\d{5}-\\d{4}")) {
	                    System.out.println("Número inserido de Forma incorreta");
	                    return null;
	                }
	                break;

	            case celular:
	                if (!contato.getContato().matches("\\(\\d{2}\\) \\d{5}-\\d{4}")) {
	                    System.out.println("E-mail inválido.");
	                    return null;
	                }
	                break;
	                
	            case whatsapp:
	                if (!contato.getContato().matches("\\(\\d{2}\\) \\d{5}-\\d{4}")) {
	                    System.out.println("E-mail inválido.");
	                    return null;
	                }
	                break;
	                
	            case email_pessoal:
	                if (!contato.getContato().matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$")) {
	                    System.out.println("E-mail inválido.");
	                    return null;
	                }
	                break;
	                
	            case email_profissional:
	                if (!contato.getContato().matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$")) {
	                    System.out.println("E-mail inválido.");
	                    return null;
	                }
	                break;
	                
	            case linkedin:
	                if (!contato.getContato().matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$")) {
	                    System.out.println("E-mail inválido.");
	                    return null;
	                }
	                break;
	                
	            case XboxLive:
	                if (!contato.getContato().matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$")) {
	                    System.out.println("E-mail inválido.");
	                    return null;
	                }
	                break;
	                
	            case PSN:
	                if (!contato.getContato().matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$")) {
	                    System.out.println("E-mail inválido.");
	                    return null;
	                }
	                break;
	                

	            default:
	                System.out.println("Tipo de contato inválido.");
	                return null;
	        }

	        contato.setPessoa(findPessoa.get());
	        System.out.println("[" +
	                " Tipo:" + contato.getOrderTipo() + "," +
	                " Contato:" + contato.getContato() + "]");

	        return contatoRepository.save(contato);
	        
	    } else {
	        System.out.println("Contato inserido de forma incorreta.");
	        return null;
	    }		
	}

	// ----- ENCONTRAR POR ID -----
	public Optional<Contatos> findById(Long id){
		return contatoRepository.findById(id);
	}
	
	// ----- LISTAGEM -----
	public List<Contatos> findAll(){
		return contatoRepository.findAll();
	}
	
	// ------ CONTATOS POR PESSOA -----
    public List<Contatos> listarContatosPorPessoa(Long idPessoa) {
        return contatoRepository.findByPessoaId(idPessoa);
    }
	
	
	// ----- ATUALIZAR ----- ARRUMAR
	public Contatos update(Long id,Contatos contato) {
		
		Optional<Contatos> findContato = contatoRepository.findById(id);
		
		if(findContato.isPresent()) {

			Contatos updContato = findContato.get();
			updContato.setContato(contato.getContato());

			return contatoRepository.save(updContato);
		}
		return contatoRepository.save(contato);
	}
	
	// ----- DELETAR -----
	
	public void delete(Long id) {
		contatoRepository.deleteById(id);
	}
	
}
