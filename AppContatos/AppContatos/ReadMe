AppContatos 

Iniciado: 09 Fev. 2025

Este projeto CRUD tem como principal objetivo cadastrar pessoas com seus atributos pertinentes e assim cadastrar vários contatos ligados que essa pessoa possui.

1 - Métodos de Aplicação utilizados. 

	1.1 - A porta utilizada para a inicialização do projeto segue com o seguinte URL: https://localhost:8080:

	1.2 - Foi utilizada a Documentação OpenApi Swagger com o seguinte URL: https://localhost:8080:/swagger-ui.html

	1.3 - Foi utilizado o Banco de dados em memória H2, URL: http://localhost:8080/h2-console

		1.3.1 - Para acessar, segue os seguintes dados: JDBC URL:jdbc:h2:mem:pessoas | USERNAME = sa
		1.3.2 - Visando ter a melhor localização de LOG personalizado no console, foi desabilitada a função de mostrar o SQL com a seguinte linha: "spring.jpa.show-sql=false".
		1.3.3- Utilizado o método "update" para atualizar automaticamente o esquema do banco de dados.

2 - Métodos para utilização do projeto.
	Durante o desenvolvimento do projeto, foram utilizados dois métodos para testes de funcionamento de projeto e nos métodos endpoints requeridos. 

	2.1 - Swagger: Presente com todos os endpoints do projeto, devendo alterar alguns padrões de métodos de entradas em POST e PUT (Consulte o tópico 3.1)
	2.2 - Postman: Na pasta raiz com o nome "PostAppContatos" se encontra o arquivo para utilizar no programa, nele já está presente todos os endpoints com todos os exemplos de entradas de dados.

3 - Endpoints e métodos de entradas

	3.1 - Endpoints PESSOAS
	
	POST pessoa - save (http://localhost:8080/api/pessoas)	--> criar uma pessoa.
	
	{
  		"nome": "Daniel Almeida",
  		"cpf": "010.101.010-10",
  		"orderLogradouro": "RUA",
  		"endereco": "Vincent Van Gogh",
  		"numero": 1,
  		"cep": "01010-101",
  		"cidade": "Osasco",
  		"orderUf": "SP"
	}
	
	PUT pessoa - update (http://localhost:8080/api/pessoas/1) --> Atualiza uma pessoa com o {ID} requisitado, caso não haja uma pessoa cadastrada com {ID} é criado uma nova.
	
	{
    	"nome": "Daniel Almeida",
    	"cpf": "010.101.010-11",
    	"orderLogradouro": "Avenida",
    	"endereco": "Agatha Christie",
    	"numero": 2,
    	"cep": "10101-010",
    	"cidade": "Rio de Janeiro",
    	"orderUf": "RJ"
	}
	
	DELETE pessoa - delete (http://localhost:8080/api/pessoas/{ID}) --> Deleta uma pessoa com o {ID} requisitado.
	
	GET pessoa - FindByid (http://localhost:8080/api/pessoas/{ID}) --> Encontra uma pessoa com o {ID} requisitado.
	
	GET pessoa - FindAll (http://localhost:8080/api/pessoas) --> Lista todas pessoas cadastradas.
	
	GET pessoa - MalaDireta (http://localhost:8080/api/pessoas/maladireta/{ID}) --> Encontra uma pessoa com o {ID} requisitado em versão mala direta.
	
	GET pessoa - MalaDiretaFindAll  (http://localhost:8080/api/pessoas/maladireta) --> Lista em versão Mala Direta todas pessoas cadastradas.
	
	3.2 - Endpoints CONTATOS
	
	POST contato - save (http://localhost:8080/api/contatos) --> cria um contato e liga a uma pessoa.
	
	{
    	"orderTipo": 0,
    	"contato": "(11) 12345-7890",
    	"pessoa" :{
        	"id": 1
    	}
	}
	
	PUT contato - update (http://localhost:8080/api/contatos/{ID}) --> Atualiza um contato com o {ID} requisitado.
	
	{
    	"orderTipo": 0,
    	"contato": "(11) 93635-7794"
	}
	
	DELETE contato - delete (http://localhost:8080/api/contatos/{ID}) --> Deleta um contato com o {ID} requisitado.
	
	GET contato - findById (http://localhost:8080/api/contatos/{ID}) --> Encontra um contato com o {ID} requisitado.
	
	GET contato - findAll (http://localhost:8080/api/contatos) --> Lista todos contatos cadastrados.
	
	GET contato - findbyPessoa (http://localhost:8080/api/contatos/pessoas/{ID}) --> Lista todos contatos de uma pessoa. 
	

4 - Métodos de validação de atributos
	Para garantir o melhor controle no tratamento de dados que o projeto recebe, foram implantadas validações em todos os atributos para que, assim, os dados que serão alocados no banco de dados seja apenas o correspondente com sua finalidade.
	
	4.1 - Pessoas:
		
		4.1.1 - Nome: Não pode ser nulo | Deve ter mais de uma palavra (Nome completo) | Não pode possuir números | Deve ter no máximo 150 caracteres.
		
		4.1.2 - CPF: Não pode ser nulo | Aceita apenas padrão de CPF (010.101.010-10) | Atributo com valor único.
		
		4.1.2 - Tipo Logradouro: Não pode ser nulo | Deve ser um tipo válido de logradouro, listado em ENUM (Consulte o tópico 5.1).
		
		4.1.3 - Endereço: Não pode ser nulo | Não pode possuir número | Deve ter no máximo 100 caracteres.

		4.1.4 - Numero: Não pode ser nulo | Deve ser um número inteiro entre 1 e 9999.

		4.1.5 - CEP: Não pode ser nulo | Aceita apenas padrão de CEP (01010-101).

		4.1.6 - Cidade: Não pode ser nulo | Deve ter no máximo 35 caracteres | Não pode possuir número.

		4.1.7 - Unidade Federativa (UF): Não pode ser nulo | Deve ser um tipo válido de UF, listado em ENUM (Consulte o tópico 5.2).


	4.2 - Contatos:

		4.2.1 - Tipo de Contato: Não pode ser nulo | Deve ser um tipo válido entre 0 - 7, listado em ENUM (Consulte o tópico 5.3).

		4.2.2 - Contato: Neste atributo existem vários tipos de validações conforme o tipo de contato, como listado abaixo.

				Escolha 0 - 2: Aceita apenas no padrão contato de telefone com DD e colchetes. | (11) 90000-0000

				Escolha 3 - 4: Aceita apenas no padrão e-mail, podendo ser @dominio.com, @dominio.com.br e @dominio.org.br | TESTE@TESTE.COM 

				Escolha 5 : Aceita apenas URL do padrão do LinkedIn | (https://www.linkedin.com/in/daniel-silva-almeida/)

				Escolha 6 - 7: Deve ter entre 3 e 15 caracteres e não pode ter caracteres especiais. | Gamer1234

5 - Lista de ENUM
	Para controle de dados inseridos em campos com um número definido de escolhas, foram feitas lista de Enum, segue abaixo os campos.
		
		5.1 - Tipo de Logradouro: Método de entrada String, onde compara a palavra que foi inserido com cada item da lista.
					  RUA("Rua"), AVENIDA("Avenida"), ESTRADA("Estrada"), TRAVESSA("Travessa"), VILA("Vila"), QUADRA("Quadra").
		
		5.2 - Unidade Federativa (UF):  Método de entrada String, onde compara a sigla que foi inserido com cada item da lista. 
						AC("AC"), AL("AL"), AP("AP"), AM("AM"), BA("BA"), CE("CE"), DF("DF"), ES("ES"), GO("GO"), MA("MA"), 
    					MT("MT"), MS("MS"), MG("MG"), PA("PA"), PB("PB"), PR("PR"), PE("PE"), PI("PI"), RJ("RJ"), RN("RN"), 
    					RS("RS"), RO("RO"), RR("RR"), SC("SC"), SP("SP"), SE("SE"), TO("TO");

		5.3 - Tipo de contato:  Método de entrada sendo Int, onde cada número representa um tipo de contato e retorna ao usuário.
						Residencial(0), celular(1), whatsapp(2), email_pessoal(3), email_profissional(4), linkedin(5), XboxLive(6), PSN(7);
			
6 - Observações gerais
		
			










1.0 - Gerado em https://start.spring.io/ 

Tecnologias:
Project: Maven | Language: Java | Spring Boot: 3.4.2 | Packaging: Jar | Java: 21

Metadada:
Group: br.com.dnl | Artifact e Name: AppContatos | Package name: br.com.dnl.AppContatos

Dependências:

Spring Web | Spring Data JPA | H2 Database 

Outras dependências: 
	    
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-databind</artifactId>
	</dependency>
		
	<dependency>
		<groupId>org.springdoc</groupId>
		<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
		<version>2.2.0</version>
	</dependency>
 